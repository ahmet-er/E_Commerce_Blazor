@page "/category/create"
@page "/category/edit/{Id:int}"
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager

<div class="form-container p-3">
    <div class="row my-2">
        <h3 class="card-title text-primary mb-3 ml-3">
            @Title
        </h3>
        <div class="col-12">
            @if (IsLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif" width="100px"/>
                </div>
            }
            else
            {
                <EditForm Model="Category" OnValidSubmit="UpsertCategory">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Name</label>
                        <div class="col-sm-10">
                            <InputText @bind-Value="Category.Name" class="form-control"></InputText>
                            <ValidationMessage For="(() => Category.Name)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group py-3">
                        <button class="btn btn-primary">@Title</button>
                        <NavLink href="category" class="btn btn-warning">Back To Categories</NavLink>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private CategoryDTO Category { get; set; } = new CategoryDTO();
    public string Title { get; set; } = "Create";
    public bool IsLoading { get; set; } = true;

    protected async override Task OnInitializedAsync()
    {
        await Task.Delay(500);
        if (Id == 0)
        {
            IsLoading = false;
        }
        else
        {
            Category = await _categoryRepository.GetById(Id);
            Title = "Update";
            IsLoading = false;
        }
    }

    private async Task UpsertCategory()
    {
        if (Id == 0)
        {
            var result = await _categoryRepository.Create(Category);
        }
        else
        {
            var result = await _categoryRepository.Update(Category);
        }
        _navigationManager.NavigateTo("category");
    }
}
